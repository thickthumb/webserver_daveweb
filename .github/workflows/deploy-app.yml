name: Build & Push Go Webserver with Docker

on:
  push:
    branches:
      - main  # Trigger on changes to the main branch
      - ft-fixer

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set Image Version
        run: |
          TAG=$(date +%Y%m%d)-$(echo ${{ github.sha }} | cut -c1-5)
          echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV


      - name: Build Docker Image using Docker
        run: |
          docker build -t devdave90/goserveer:latest .


      - name: Push Docker Image using Docker
        run: |
          docker tag devdave90/goserveer:latest devdave90/goserveer:$IMAGE_TAG
          docker push devdave90/goserveer:$IMAGE_TAG
          docker push devdave90/goserveer:latest



      - name: Send Slack Notification on Success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: "ðŸš€ Deployment Successful! New Docker Image: `devdave90/goserveer:$IMAGE_TAG`"
          SLACK_COLOR: "#36a64f"

      - name: Logout from Docker Hub
        run: docker logout





# ## AWS/Azure Container_Registry BUILD AND PUSH
# - name:build tag and push image to ecr for service 
#   id: build-push
#   run: |
#     # define ecr repo
#     repo="${{ inputs.ECR_REGISTRY }}/ BANKEND/${{ inputs.SERVICE }}"
#     echo "repository: $repo"

#     # extract service name from service
#     service_fu_name="$IMAGE_TAG"


#     #tag the image with service name and tag
#     docker image tag "$service_full_name" "${repo}":"${{ inputs.IMAGE_TAG }}"
#     echo "tagged image as : ${repo}:${{ inputs.IMAGE_TAG }}"


#     #push image to ecr
#     docker push "${repo}:${{ inputs.IMAGE_TAG }}"
#   shell: bash